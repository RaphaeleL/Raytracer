        -:    0:Source:math.tcc
        -:    0:Graph:raytracer.gcno
        -:    0:Data:raytracer.gcda
        -:    0:Runs:1
        -:    1:// A Vector with SIZE elements of type T.
        -:    2://
        -:    3:// Provides basic mathematical behaviour to add, subtract, normalize,
        -:    4:// calculating the length, building scalar product of Vectors.
        -:    5:// Provides cross product and determinant or Vectors of SIZE = 3.
        -:    6://
        -:    7:// T has to be a type with defined 0 constant, the
        -:    8:// binary +, -, * and / operators. The sqrt function have to be overloaded for T.
        -:    9:template <class T, size_t SIZE>
        -:   10:class Vector {
        -:   11:private:
        -:   12:  T x[SIZE];
        -:   13:public:
3326997394*:   14:  Vector<T, SIZE>() {
18305169308*:   15:    for (size_t i = 0u; i < SIZE; i++) {
13728876981*:   16:      this->x[i] = 0;
        -:   17:    }
        -:   18:  }
        -:   19:
        -:   20:  Vector<T, SIZE>(T x[SIZE]) {
        -:   21:    for (size_t i = 0u; i < SIZE; i++) {
        -:   22:      this->x[i] = x[i];
        -:   23:    }
        -:   24:  }
        -:   25:
        -:   26:  // undefined behaviour if list.size() > SIZE
     7293:   27:  Vector<T, SIZE>(std::initializer_list<T> list) {
        -:   28:    size_t i = 0u;
    29172:   29:    for (T t : list) {
    21879:   30:      this->x[i++] = t;
        -:   31:    }
        -:   32:  }
        -:   33:
        -:   34:  T & operator[](size_t index) {
        -:   35:    return x[index];
        -:   36:  }
        -:   37:
        -:   38:  Vector<T, SIZE> operator+(const Vector<T, SIZE> addend) const {
        -:   39:    Vector<T, SIZE> sum;
        -:   40: 
1656614508:   41:    for (size_t i = 0u; i < SIZE; i++) {
1242460881:   42:      sum.x[i] = this->x[i] + addend.x[i];
        -:   43:    }
        -:   44:
414153627:   45:    return sum;
        -:   46:  }
        -:   47:
        -:   48:  Vector<T, SIZE> operator-(const Vector<T, SIZE> subtract) const {
        -:   49:    Vector<T, SIZE> difference;
        -:   50: 
9994691080*:   51:    for (size_t i = 0u; i < SIZE; i++) {
7496018310*:   52:      difference.x[i] = this->x[i] - subtract.x[i];
        -:   53:    }
        -:   54:
2498607234*:   55:    return difference;
        -:   56:  }
        -:   57:
        -:   58:  
        -:   59:
        -:   60:  T scalar_product(Vector<T, SIZE>  factor) {
        -:   61:    T product = 0;
        -:   62:
9156850976:   63:    for (size_t i = 0u; i < SIZE; i++) {
6867638232:   64:      product += this->x[i] * factor.x[i];
        -:   65:    }
        -:   66:
        -:   67:    return product;
        -:   68:  }
        -:   69:
        -:   70:  
        -:   71:  // returns the square of the euclidian length of this vector
        -:   72:  T square_of_length(void) const {
        -:   73:    T square_of_length = 0;
        -:   74:
839369880:   75:    for (size_t i = 0u; i < SIZE; i++) {
629527410:   76:      square_of_length += ( this->x[i] * this->x[i] );
        -:   77:    }
        -:   78:
        -:   79:    return square_of_length;
        -:   80:  }
        -:   81:
        -:   82:  // returns the euclidian length of this vector
        -:   83:  // needs T sqrt(T) to be defined for T 
        -:   84:  T length(void) const {
    52720:   85:    return sqrt( square_of_length() );
        -:   86:  }
        -:   87:
        -:   88:  // needs binary / to be defined for T
    52718:   89:  void normalize(void) {
        -:   90:    const T length = this->length();
        -:   91:
   210872:   92:    for (size_t i = 0u; i < SIZE; i++) {
   158154:   93:       this->x[i] /= length;
        -:   94:    }       
    52718:   95:  }
        -:   96:
        -:   97:
        -:   98:  friend Vector<T, SIZE> operator*(const T factor, Vector<T, SIZE>  v)  {
        -:   99:    Vector<T, SIZE> product;
        -:  100:
1656683980:  101:    for (size_t i = 0u; i < SIZE; i++) {
1242512985:  102:      product[i] = factor * v[i];
        -:  103:    }
        -:  104:
414170995:  105:    return product;
        -:  106:  }
        -:  107:
        -:  108:  bool equals_near(Vector<T, SIZE> v, const FLOAT EPSILON = 0.00001) {
        -:  109:    for (size_t i = 0u; i < SIZE; i++) {
        -:  110:      if ( fabs(this->x[i] - v.x[i]) > EPSILON ) {
        -:  111:        return false;
        -:  112:      }
        -:  113:    }
        -:  114:    return true;
        -:  115:  }
        -:  116:};
        -:  117:
        -:  118:template <class T>
        -:  119:std::ostream & operator<<(std::ostream & out, Vector<T, 3> & v) {
        -:  120:  out << "( " << v[0] << ", "<< v[1] << ", " << v[2] << ")";
        -:  121:  return out;
        -:  122:}
        -:  123:
        -:  124:
        -:  125:template <class T>
1249294933:  126:Vector<T, 3> cross_product(Vector<T, 3> v1, Vector<T, 3> v2) {
        -:  127:  Vector<T, 3> cross;
        -:  128:
1249294933:  129:  cross[0] = v1[1] * v2[2] - v1[2] * v2[1];
1249294933:  130:  cross[1] = v1[2] * v2[0] - v1[0] * v2[2];
1249294933:  131:  cross[2] = v1[0] * v2[1] - v1[1] * v2[0];
        -:  132:
1249294933:  133:  return cross;
        -:  134:}
        -:  135:
        -:  136:
        -:  137:
        -:  138:
